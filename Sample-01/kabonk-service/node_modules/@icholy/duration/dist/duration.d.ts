export declare type DurationLike = Duration | string | number;
export declare type DateLike = Date | number;
export declare class Duration {
    private _milliseconds;
    constructor(value?: DurationLike);
    static millisecond: Duration;
    static second: Duration;
    static minute: Duration;
    static hour: Duration;
    static day: Duration;
    static week: Duration;
    static microseconds(us: number): Duration;
    static nanoseconds: (ns: number) => Duration;
    static milliseconds(milliseconds: number): Duration;
    static seconds(seconds: number): Duration;
    static minutes(minutes: number): Duration;
    static hours(hours: number): Duration;
    static days(days: number): Duration;
    static weeks(weeks: number): Duration;
    nanoseconds(): number;
    microseconds(): number;
    milliseconds(): number;
    seconds(): number;
    minutes(): number;
    hours(): number;
    days(): number;
    weeks(): number;
    toString(): string;
    valueOf(): number;
    abs(): Duration;
    static parse(duration: string): Duration;
    static valueOf(duration: DurationLike): number;
    truncate(duration: DurationLike): Duration;
    isGreaterThan(duration: DurationLike): boolean;
    isLessThan(duration: DurationLike): boolean;
    isEqualTo(duration: DurationLike): boolean;
    after(date: DateLike): Date;
    static since(date: DateLike): Duration;
    static until(date: DateLike): Duration;
    static between(a: DateLike, b: DateLike): Duration;
    static add(a: DurationLike, b: DurationLike): Duration;
    static subtract(a: DurationLike, b: DurationLike): Duration;
    static multiply(a: DurationLike, b: DurationLike): Duration;
    static divide(a: DurationLike, b: DurationLike): number;
}
export default Duration;
